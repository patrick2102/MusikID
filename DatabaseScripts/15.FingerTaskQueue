DROP PROCEDURE IF EXISTS UPDATE_TASK;
Delimiter //
CREATE PROCEDURE UPDATE_TASK(
	in parID INT,
    in parMACHINE VARCHAR(25)
)
BEGIN

	UPDATE TASK_QUEUE 
	SET 
		STARTED = 1,
		MACHINE = parMACHINE 
	WHERE 
		ID = parID;

   END //
DELIMITER ;

DROP PROCEDURE IF EXISTS UPDATE_FINGER_TASK;
Delimiter //
CREATE PROCEDURE UPDATE_FINGER_TASK(
	in parID INT,
    in parMACHINE VARCHAR(25)
)
BEGIN

	UPDATE TASK_QUEUE 
	SET 
		STARTED = 1,
		MACHINE = parMACHINE 
	WHERE 
		ID = parID;

   END //
DELIMITER ;

DROP PROCEDURE IF EXISTS GET_TASK;
DELIMITER //

CREATE PROCEDURE GET_TASK()
 
BEGIN

	DECLARE TASK_ID BIGINT;

    START TRANSACTION;

   	SET TASK_ID = (
	SELECT id FROM TASK_QUEUE WHERE STARTED = 0 
    ORDER BY LAST_UPDATED ASC LIMIT 1 FOR UPDATE);
	
   COMMIT;
   
   SELECT tq.id, task_type, tq.arguments, j.id, j.file_id 
   FROM TASK_QUEUE tq, job j
   WHERE tq.id = TASK_ID
   and tq.job_id = j.id;
   
   END //
DELIMITER ;


DROP PROCEDURE IF EXISTS GET_FINGER_TASK;
DELIMITER //

CREATE PROCEDURE GET_FINGER_TASK()
 
BEGIN

	DECLARE TASK_ID BIGINT;

    START TRANSACTION;

   	SET TASK_ID = (
	SELECT id FROM FINGER_TASK_QUEUE WHERE STARTED = 0 
    ORDER BY LAST_UPDATED ASC LIMIT 1 FOR UPDATE);
	
   COMMIT;
   
   SELECT tq.id, task_type, tq.arguments, j.id, j.file_id 
   FROM FINGER_TASK_QUEUE tq, job j
   WHERE tq.id = TASK_ID
   and tq.job_id = j.id;
   
   END //
DELIMITER ;




CREATE TABLE IF NOT EXISTS FINGER_TASK_QUEUE (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    STARTED BOOLEAN NOT NULL,
    LAST_UPDATED TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), 
    TASK_TYPE VARCHAR(50) NOT NULL,
    ARGUMENTS VARCHAR(200) NOT NULL,
    JOB_ID BIGINT NOT NULL,
	MACHINE VARCHAR(50) DEFAULT 'None',
    PRIMARY KEY(ID)
);


DROP PROCEDURE IF EXISTS INSERT_FINGER_TASK;

DELIMITER //
CREATE PROCEDURE INSERT_FINGER_TASK(
	IN parTASK_TYPE VARCHAR(50),
	IN parARGUMENTS VARCHAR(200),
	in parJOB_ID BIGINT
)
 
BEGIN

	DECLARE TASK_ID  BIGINT;

   INSERT INTO FINGER_TASK_QUEUE (
    STARTED,
	TASK_TYPE,
	ARGUMENTS,
	JOB_ID
    ) 
	VALUES (
	FALSE,
	parTASK_TYPE, 
	parARGUMENTS,
    parJOB_ID);
   
   SET TASK_ID = LAST_INSERT_ID();
   SELECT TASK_ID AS ID;
   
   END //
DELIMITER ;


DROP PROCEDURE IF EXISTS DELETE_FINGER_TASK;

DELIMITER //
CREATE PROCEDURE DELETE_FINGER_TASK(
	IN parTASK_ID BIGINT
)
 
BEGIN

   DELETE FROM FINGER_TASK_QUEUE WHERE id = parTASK_ID;
   
   END //
DELIMITER ;

