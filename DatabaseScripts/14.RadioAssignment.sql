CREATE TABLE IF NOT EXISTS RADIO_TASK_QUEUE (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    STARTED BOOLEAN NOT NULL,
    LAST_UPDATED TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), 
    CHANNEL_ID VARCHAR(50) NOT NULL,
    CHUNK_PATH VARCHAR(200) NOT NULL,
    SEGMENT_DURATION INT NOT NULL,
    OVERLAP_DURATION INT NOT NULL,
    JOB_ID BIGINT NOT NULL,
    PRIMARY KEY(ID)
);

DROP PROCEDURE IF EXISTS DELETE_RADIO_TASK;

DELIMITER //
CREATE PROCEDURE DELETE_RADIO_TASK(
	IN parTASK_ID BIGINT
)
 
BEGIN

   DELETE FROM RADIO_TASK_QUEUE WHERE id = parTASK_ID;
   
   END //
DELIMITER ;


DROP PROCEDURE IF EXISTS GET_RADIO_TASK;

DELIMITER //
CREATE PROCEDURE GET_RADIO_TASK(
)
 
BEGIN

	DECLARE TASK_ID BIGINT;

    START TRANSACTION;

   	SET TASK_ID = (
	SELECT id FROM RADIO_TASK_QUEUE WHERE STARTED = 0 
    ORDER BY LAST_UPDATED ASC LIMIT 1 FOR UPDATE);
   	
	UPDATE RADIO_TASK_QUEUE 
	SET 
		STARTED = 1
	WHERE 
		id = TASK_ID;
   
   COMMIT;
   
   SELECT id, channel_id, chunk_path, job_id, segment_duration, overlap_duration FROM RADIO_TASK_QUEUE WHERE id = TASK_ID;
   
   END //
DELIMITER ;


DROP PROCEDURE IF EXISTS INSERT_RADIO_TASK;

DELIMITER //
CREATE PROCEDURE INSERT_RADIO_TASK(
	IN parCHANNEL_ID VARCHAR(50),
	IN parCHUNK_PATH VARCHAR(200),
	in parJOB_ID BIGINT
)
 
BEGIN

	DECLARE TASK_ID  BIGINT;

   INSERT INTO RADIO_TASK_QUEUE (
   STARTED,
	CHANNEL_ID,
	CHUNK_PATH,
	JOB_ID
    ) 
	VALUES (
	FALSE,
	parCHANNEL_ID, 
	parCHUNK_PATH,
    parJOB_ID);
	
	SET TASK_ID = LAST_INSERT_ID();
    SELECT TASK_ID AS ID;
   
   END //
DELIMITER ;


