USE DRFINGERPRINTS;

DROP TABLE IF EXISTS JOB;

CREATE TABLE JOB (
    ID BIGINT NOT NULL AUTO_INCREMENT,
	JOB_TYPE VARCHAR(50) NOT NULL,
	FILE_ID BIGINT(20) NULL,
    START_DATE TIMESTAMP NOT NULL,
    LAST_UPDATED TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, 
    PERCENTAGE FLOAT NOT NULL,
	ARGUMENTS VARCHAR(500), 
    PRIMARY KEY(ID)
);

DROP PROCEDURE IF EXISTS INSERT_JOB;

DELIMITER //
CREATE PROCEDURE INSERT_JOB(
    IN parJOB_TYPE VARCHAR(50),
    IN parFILE_ID BIGINT(20),
    IN parSTART_DATE TIMESTAMP,
    IN parPERCENTAGE FLOAT,
	IN parARGUMENTS VARCHAR(500),
	IN parUSER VARCHAR(50)
)
 
BEGIN

  DECLARE JOB_ID  BIGINT;
   
   INSERT INTO JOB (
	JOB_TYPE, 
	FILE_ID, 
	START_DATE, 
	PERCENTAGE,
	ARGUMENTS,
	USER) 
	VALUES (  
	parJOB_TYPE, 
	parFILE_ID, 
	parSTART_DATE,
	parPERCENTAGE,
	parARGUMENTS, 
	parUSER);

   SET JOB_ID = LAST_INSERT_ID();
   SELECT JOB_ID AS ID;
	
   END //
DELIMITER ;

DROP PROCEDURE IF EXISTS UPDATE_JOB;

DELIMITER //
CREATE PROCEDURE UPDATE_JOB(
	IN parJOB_ID INT,
	IN parPERCENTAGE FLOAT
	)
	
BEGIN
    UPDATE JOB SET 
		PERCENTAGE = parPERCENTAGE
	WHERE parJOB_ID = ID;
	
END //
DELIMITER ;




USE DRFINGERPRINTS;

DROP TABLE IF EXISTS ERRORS;

CREATE TABLE ERRORS (
    ID BIGINT NOT NULL AUTO_INCREMENT,
	JOB_ID BIGINT(20) NOT NULL,
	ERROR_MSG VARCHAR(500), 
    LAST_UPDATED TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,  
    PRIMARY KEY(ID)
);

DROP PROCEDURE IF EXISTS INSERT_ERROR;

DELIMITER //
CREATE PROCEDURE INSERT_ERROR(
    IN parERROR_MSG VARCHAR(1000),
    IN parJOB_ID BIGINT(20)
)
 
BEGIN

   
   INSERT INTO ERRORS (
	JOB_ID, 
	ERROR_MSG) 
	VALUES (  
	parJOB_ID, 
	parERROR_MSG
	);

	
   END //
DELIMITER ;

