USE DRFINGERPRINTS;

DROP TABLE IF EXISTS LIVESTREAM_RESULTS;

CREATE TABLE LIVESTREAM_RESULTS (
    ID BIGINT NOT NULL AUTO_INCREMENT,
	SONG_ID INT NOT NULL,
    CHANNEL_ID VARCHAR(19) NOT NULL,
    PLAY_DATE DATE NOT NULL,
    LAST_UPDATED TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, 
    OFFSET TIME NOT NULL,
    DURATION INT NOT NULL,
    ACCURACY FLOAT NOT NULL,
    PRIMARY KEY(ID),
    FOREIGN KEY (SONG_ID) REFERENCES SONGS(ID),
    FOREIGN KEY (CHANNEL_ID) REFERENCES STATIONS(DR_ID)
);

DROP TABLE IF EXISTS ON_DEMAND_RESULTS;

CREATE TABLE IF NOT EXISTS ON_DEMAND_RESULTS (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    SONG_ID INT NOT NULL,
    LAST_UPDATED TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, 
    OFFSET TIME NOT NULL,
    DURATION INT NOT NULL,
    FILEPATH VARCHAR(255) NOT NULL,
    FILE_TYPE VARCHAR(10) NOT NULL,
    ACCURACY FLOAT NOT NULL,
    PRIMARY KEY(ID),
    FOREIGN KEY (SONG_ID) REFERENCES SONGS(ID)
);

##Stored procedures for inserting into LIVESTREAM_RESULTS
DROP PROCEDURE IF EXISTS INSERT_LIVESTREAM_RESULTS;

DELIMITER //
CREATE PROCEDURE INSERT_LIVESTREAM_RESULTS(
    IN parDR_DISKOTEKSNR INT,
    IN parSIDENUMMER INT,
    IN parSEKVENSNUMMER INT,
    IN parCHANNEL_ID VARCHAR(19),
    IN parPLAY_DATE TIMESTAMP,
    IN parOFFSET TIME,
    IN parDURATION INT,
    IN parACCURACY FLOAT,
	IN parSONG_OFFSET FLOAT
)
 
BEGIN

  DECLARE TRACK_ID INT;

  SET TRACK_ID = NULL;
  
   SELECT ID INTO TRACK_ID
	FROM SONGS S
	WHERE
		parDR_DISKOTEKSNR = S.DR_DISKOTEKSNR AND
		parSIDENUMMER = S.SIDENUMMER AND
		parSEKVENSNUMMER = S.SEKVENSNUMMER;
   
   INSERT INTO LIVESTREAM_RESULTS (
	SONG_ID, 
	CHANNEL_ID, 
	PLAY_DATE, 
	OFFSET, 
	DURATION, 
	ACCURACY,
	SONG_OFFSET) 
	VALUES ( 
	TRACK_ID, 
	parCHANNEL_ID, 
	parPLAY_DATE, 
	parOFFSET, 
	parDURATION, 
	parACCURACY,
	parSONG_OFFSET);

   SET TRACK_ID = LAST_INSERT_ID();
   SELECT TRACK_ID AS ID;
	
   END //
DELIMITER ;

DROP PROCEDURE IF EXISTS UPDATE_LIVESTREAM_RESULTS;
    
DELIMITER //
    CREATE PROCEDURE UPDATE_LIVESTREAM_RESULTS(
	IN parID INT,
	IN parOFFSET TIME,
	IN parDURATION INT,
	IN parACCURACY FLOAT
        )
	BEGIN
    UPDATE LIVESTREAM_RESULTS SET 
		OFFSET = parOFFSET,
		PLAY_DATE = PLAY_DATE,
        DURATION = parDURATION,
        ACCURACY = parACCURACY
	WHERE parID = ID;
	
	END //
 DELIMITER ;
 
 
 DROP PROCEDURE IF EXISTS GET_STATIONS_ALL;
    
DELIMITER //
    CREATE PROCEDURE GET_STATIONS_ALL(
        )
	BEGIN
	
	SELECT * 
	FROM STATIONS;
	
	END //
 DELIMITER ;
 
  DROP PROCEDURE IF EXISTS GET_TRACKS;
    
DELIMITER //
    CREATE PROCEDURE GET_TRACKS(
	IN parLIMIT INT
        )
	BEGIN
	
	SELECT * 
	FROM SONGS
	ORDER BY DATE_CHANGED DESC
	LIMIT parLIMIT;
	
	END //
 DELIMITER ;
 
   DROP PROCEDURE IF EXISTS GET_TRACK;
    
DELIMITER //
    CREATE PROCEDURE GET_TRACK(
	IN parID INT
        )
	BEGIN
	
	SELECT * 
	FROM SONGS
	WHERE ID = parID;
	
	END //
 DELIMITER ;
 
    DROP PROCEDURE IF EXISTS GET_TRACK_DISKONUMBER;
    
DELIMITER //
    CREATE PROCEDURE GET_TRACK_DISKONUMBER(
	IN parID VARCHAR(20)
        )
	BEGIN
	
	SELECT * 
	FROM SONGS
	WHERE REFERENCE = parID;
	
	END //
 DELIMITER ;
 
 
 
 
