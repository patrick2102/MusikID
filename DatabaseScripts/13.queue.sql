CREATE TABLE IF NOT EXISTS TASK_QUEUE (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    STARTED BOOLEAN NOT NULL,
    LAST_UPDATED TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), 
    TASK_TYPE VARCHAR(50) NOT NULL,
    ARGUMENTS VARCHAR(200) NOT NULL,
    JOB_ID BIGINT NOT NULL,
	MACHINE VARCHAR(50) DEFAULT 'None',
    PRIMARY KEY(ID)
);

CREATE TABLE IF NOT EXISTS FINGERTASK_QUEUE (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    STARTED BOOLEAN NOT NULL,
    LAST_UPDATED TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), 
    TASK_TYPE VARCHAR(50) NOT NULL,
    ARGUMENTS VARCHAR(200) NOT NULL,
    JOB_ID BIGINT NOT NULL,
	MACHINE VARCHAR(50) DEFAULT 'None',
    PRIMARY KEY(ID)
);

CREATE TABLE IF NOT EXISTS RADIO_TASK_QUEUE (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    STARTED BOOLEAN NOT NULL,
    LAST_UPDATED TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), 
    CHANNEL_ID VARCHAR(50) NOT NULL,
    CHUNK_PATH VARCHAR(200) NOT NULL,
    JOB_ID BIGINT NOT NULL,
	MACHINE VARCHAR(50) DEFAULT 'None',
    PRIMARY KEY(ID)
);

DROP PROCEDURE IF EXISTS INSERT_TASK;

DELIMITER //
CREATE PROCEDURE INSERT_TASK(
	IN parTASK_TYPE VARCHAR(50),
	IN parARGUMENTS VARCHAR(200),
	in parJOB_ID BIGINT
)
 
BEGIN

	DECLARE TASK_ID  BIGINT;

   INSERT INTO TASK_QUEUE (
    STARTED,
	TASK_TYPE,
	ARGUMENTS,
	JOB_ID
    ) 
	VALUES (
	FALSE,
	parTASK_TYPE, 
	parARGUMENTS,
    parJOB_ID);
   
   SET TASK_ID = LAST_INSERT_ID();
   SELECT TASK_ID AS ID;
   
   END //
DELIMITER ;

DROP PROCEDURE IF EXISTS UPDATE_TASK_TO_STARTED;
Delimiter //

CREATE PROCEDURE UPDATE_TASK_TO_STARTED(
	in parID BIGINT(25),
    in parMACHINE VARCHAR(25)
)
BEGIN

	DECLARE TASK_ID BIGINT;

    START TRANSACTION;

	UPDATE TASK_QUEUE 
	SET 
		STARTED = 1,
		MACHINE = parMACHINE
	WHERE 
		id = parID;
   COMMIT;

   END //
DELIMITER ;

DROP PROCEDURE IF EXISTS UPDATE_TASK_TO_STARTED;
DELIMITER //

CREATE PROCEDURE GET_TASK(
	IN parMACHINE VARCHAR(50)
)
 
BEGIN

	DECLARE TASK_ID BIGINT;

    START TRANSACTION;

   	SET TASK_ID = (
	SELECT id FROM TASK_QUEUE WHERE STARTED = 0 
    ORDER BY LAST_UPDATED ASC LIMIT 1 FOR UPDATE);
	
   COMMIT;
   
   SELECT tq.id, task_type, tq.arguments, j.id, j.file_id 
   FROM TASK_QUEUE tq, job j
   WHERE tq.id = TASK_ID
   and tq.job_id = j.id;
   
   END //
DELIMITER ;

DROP PROCEDURE IF EXISTS DELETE_TASK;

DELIMITER //
CREATE PROCEDURE DELETE_TASK(
	IN parTASK_ID BIGINT
)
 
BEGIN

   DELETE FROM TASK_QUEUE WHERE id = parTASK_ID;
   
   END //
DELIMITER ;


DROP PROCEDURE IF EXISTS DELETE_RADIO_TASK;

DELIMITER //
CREATE PROCEDURE DELETE_RADIO_TASK(
	IN parTASK_ID BIGINT
)
 
BEGIN

   DELETE FROM RADIO_TASK_QUEUE WHERE id = parTASK_ID;
   
   END //
DELIMITER ;


DROP PROCEDURE IF EXISTS GET_RADIO_TASK;

DELIMITER //
CREATE PROCEDURE GET_RADIO_TASK(
	IN parMACHINE VARCHAR(50)
)
 
BEGIN

	DECLARE TASK_ID BIGINT;

    START TRANSACTION;

   	SET TASK_ID = (
	SELECT id FROM RADIO_TASK_QUEUE WHERE STARTED = 0 
    ORDER BY LAST_UPDATED ASC LIMIT 1 FOR UPDATE);
   	
	UPDATE RADIO_TASK_QUEUE 
	SET 
		STARTED = 1,
		MACHINE = parMACHINE
	WHERE 
		id = TASK_ID;
   
   COMMIT;
   
   SELECT id, channel_id, chunk_path, job_id 
   FROM RADIO_TASK_QUEUE 
   WHERE id = TASK_ID;
   
   END //
DELIMITER ;


DROP PROCEDURE IF EXISTS INSERT_RADIO_TASK;

DELIMITER //
CREATE PROCEDURE INSERT_RADIO_TASK(
	IN parCHANNEL_ID VARCHAR(50),
	IN parCHUNK_PATH VARCHAR(200),
	in parJOB_ID BIGINT
)
 
BEGIN

	DECLARE TASK_ID  BIGINT;

   INSERT INTO RADIO_TASK_QUEUE (
   STARTED,
	CHANNEL_ID,
	CHUNK_PATH,
	JOB_ID
    ) 
	VALUES (
	FALSE,
	parCHANNEL_ID, 
	parCHUNK_PATH,
    parJOB_ID);
	
	SET TASK_ID = LAST_INSERT_ID();
    SELECT TASK_ID AS ID;
   
   END //
DELIMITER ;


DROP PROCEDURE IF EXISTS RESET_CRASHED_TASKS;

DELIMITER //
CREATE PROCEDURE RESET_CRASHED_TASKS(
)
 
BEGIN

	UPDATE TASK_QUEUE tq 
	JOIN job j on tq.job_id = j.id
	SET STARTED = 0
	WHERE STARTED = 1 
	AND j.LAST_UPDATED <= (NOW() - INTERVAL 5 MINUTE)
	AND tq.LAST_UPDATED <= (NOW() - INTERVAL 5 MINUTE);

	
   END //
DELIMITER ;


DROP PROCEDURE IF EXISTS RESET_CRASHED_RADIO_TASKS;

DELIMITER //
CREATE PROCEDURE RESET_CRASHED_RADIO_TASKS(
)
 
BEGIN

	UPDATE RADIO_TASK_QUEUE tq 
	SET STARTED = 0
	WHERE STARTED = 1 
	AND LAST_UPDATED <= (NOW() - INTERVAL 5 MINUTE);

	
   END //
DELIMITER ;

DROP PROCEDURE IF EXISTS GET_JOBS;

DELIMITER //
CREATE PROCEDURE GET_JOBS(
)
 
BEGIN

	SELECT *
	FROM JOB;

   END //
DELIMITER ;



DROP PROCEDURE IF EXISTS GET_JOB;

DELIMITER //
CREATE PROCEDURE GET_JOB(
	IN parFILE_ID BIGINT(20)

)
BEGIN

    SELECT *
	FROM job
	WHERE parFILE_ID = FILE_ID;

      END //
DELIMITER ;


DROP PROCEDURE IF EXISTS GET_FILE;

DELIMITER //
CREATE PROCEDURE GET_FILE(
	IN parFILE_ID BIGINT(20)

)
BEGIN

    SELECT id, file_path, duration
	FROM files
	WHERE parFILE_ID = id;

      END //
DELIMITER ;

DROP PROCEDURE IF EXISTS DELETE_RESULTS;

DELIMITER //
CREATE PROCEDURE DELETE_RESULTS(
	IN parFILE_ID BIGINT(20)

)
BEGIN

    DELETE FROM ON_DEMAND_RESULTS
	WHERE parFILE_ID = file_id;

      END //
DELIMITER ;


DROP PROCEDURE IF EXISTS GET_ON_DEMAND_FILES;

DELIMITER //
CREATE PROCEDURE GET_ON_DEMAND_FILES(
	IN parLIMIT int
)

BEGIN

   SELECT file_path, f.id, j.percentage, j.user
FROM files f, job j
where f.id = j.file_id
and job_type LIKE "AudioMatch"
ORDER BY f.id DESC
LIMIT parLIMIT;
	
	END //
DELIMITER ;



