<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Swashbuckle.AspNetCore.SwaggerGen</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.ApiDescriptions.IDocumentProvider">
            <summary>
            This service will be looked up by name from the service collection when using
            the <c>dotnet-getdocument</c> tool from the Microsoft.Extensions.ApiDescription.Server package.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.SwaggerDoc(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.String,Microsoft.OpenApi.Models.OpenApiInfo)">
            <summary>
            Define one or more documents to be created by the Swagger generator
            </summary>
            <param name="swaggerGenOptions"></param>
            <param name="name">A URI-friendly name that uniquely identifies the document</param>
            <param name="info">Global metadata to be included in the Swagger output</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.DocInclusionPredicate(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Func{System.String,Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription,System.Boolean})">
            <summary>
            Provide a custom strategy for selecting actions.
            </summary>
            <param name="swaggerGenOptions"></param>
            <param name="predicate">
            A lambda that returns true/false based on document name and ApiDescription
            </param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.IgnoreObsoleteActions(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            Ignore any actions that are decorated with the ObsoleteAttribute
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.ResolveConflictingActions(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Func{System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription},Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription})">
            <summary>
            Merge actions that have conflicting HTTP methods and paths (must be unique for Swagger 2.0)
            </summary>
            <param name="swaggerGenOptions"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.CustomOperationIds(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Func{Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription,System.String})">
            <summary>
            Provide a custom strategy for assigning "operationId" to operations
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.TagActionsBy(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Func{Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription,System.String})">
            <summary>
            Provide a custom strategy for assigning a default "tag" to operations
            </summary>
            <param name="swaggerGenOptions"></param>
            <param name="tagSelector"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.TagActionsBy(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Func{Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription,System.Collections.Generic.IList{System.String}})">
            <summary>
            Provide a custom strategy for assigning "tags" to actions
            </summary>
            <param name="swaggerGenOptions"></param>
            <param name="tagsSelector"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.OrderActionsBy(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Func{Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription,System.String})">
            <summary>
            Provide a custom strategy for sorting actions before they're transformed into the Swagger format
            </summary>
            <param name="swaggerGenOptions"></param>
            <param name="sortKeySelector"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.DescribeAllParametersInCamelCase(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            Describe all parameters, regardless of how they appear in code, in camelCase
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.AddSecurityDefinition(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.String,Microsoft.OpenApi.Models.OpenApiSecurityScheme)">
            <summary>
            Add one or more "securityDefinitions", describing how your API is protected, to the generated Swagger
            </summary>
            <param name="swaggerGenOptions"></param>
            <param name="name">A unique name for the scheme, as per the Swagger spec.</param>
            <param name="securityScheme">
            A description of the scheme - can be an instance of BasicAuthScheme, ApiKeyScheme or OAuth2Scheme
            </param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.AddSecurityRequirement(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,Microsoft.OpenApi.Models.OpenApiSecurityRequirement)">
            <summary>
            Adds a global security requirement
            </summary>
            <param name="swaggerGenOptions"></param>
            <param name="securityRequirement">
            A dictionary of required schemes (logical AND). Keys must correspond to schemes defined through AddSecurityDefinition
            If the scheme is of type "oauth2", then the value is a list of scopes, otherwise it MUST be an empty array
            </param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.MapType(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Type,System.Func{Microsoft.OpenApi.Models.OpenApiSchema})">
            <summary>
            Provide a custom mapping, for a given type, to the Swagger-flavored JSONSchema
            </summary>
            <param name="swaggerGenOptions"></param>
            <param name="type">System type</param>
            <param name="schemaFactory">A factory method that generates Schema's for the provided type</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.MapType``1(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Func{Microsoft.OpenApi.Models.OpenApiSchema})">
            <summary>
            Provide a custom mapping, for a given type, to the Swagger-flavored JSONSchema
            </summary>
            <typeparam name="T">System type</typeparam>
            <param name="swaggerGenOptions"></param>
            <param name="schemaFactory">A factory method that generates Schema's for the provided type</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.CustomSchemaIds(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Func{System.Type,System.String})">
            <summary>
            Provide a custom strategy for generating the unique Id's that are used to reference object Schema's
            </summary>
            <param name="swaggerGenOptions"></param>
            <param name="schemaIdSelector">
            A lambda that returns a unique identifier for the provided system type
            </param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.IgnoreObsoleteProperties(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            Ignore any properties that are decorated with the ObsoleteAttribute
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.GeneratePolymorphicSchemas(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Generate polymorphic schemas (i.e. "oneOf") based on discovered subtypes
            </summary>
            <param name="swaggerGenOptions"></param>
            <param name="subTypesResolver"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.SchemaFilter``1(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Object[])">
            <summary>
            Extend the Swagger Generator with "filters" that can modify Schemas after they're initially generated
            </summary>
            <typeparam name="TFilter">A type that derives from ISchemaFilter</typeparam>
            <param name="swaggerGenOptions"></param>
            <param name="arguments">Optionally inject parameters through filter constructors</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.ParameterFilter``1(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Object[])">
            <summary>
            Extend the Swagger Generator with "filters" that can modify Parameters after they're initially generated
            </summary>
            <typeparam name="TFilter">A type that derives from IParameterFilter</typeparam>
            <param name="swaggerGenOptions"></param>
            <param name="arguments">Optionally inject parameters through filter constructors</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.OperationFilter``1(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Object[])">
            <summary>
            Extend the Swagger Generator with "filters" that can modify Operations after they're initially generated
            </summary>
            <typeparam name="TFilter">A type that derives from IOperationFilter</typeparam>
            <param name="swaggerGenOptions"></param>
            <param name="arguments">Optionally inject parameters through filter constructors</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.DocumentFilter``1(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Object[])">
            <summary>
            Extend the Swagger Generator with "filters" that can modify SwaggerDocuments after they're initially generated
            </summary>
            <typeparam name="TFilter">A type that derives from IDocumentFilter</typeparam>
            <param name="swaggerGenOptions"></param>
            <param name="arguments">Optionally inject parameters through filter constructors</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.IncludeXmlComments(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Func{System.Xml.XPath.XPathDocument},System.Boolean)">
            <summary>
            Inject human-friendly descriptions for Operations, Parameters and Schemas based on XML Comment files
            </summary>
            <param name="swaggerGenOptions"></param>
            <param name="xmlDocFactory">A factory method that returns XML Comments as an XPathDocument</param>
            <param name="includeControllerXmlComments">
            Flag to indicate if controller XML comments (i.e. summary) should be used to assign Tag descriptions.
            Don't set this flag if you're customizing the default tag for operations via TagActionsBy.
            </param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SwaggerGenOptionsExtensions.IncludeXmlComments(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.String,System.Boolean)">
            <summary>
            Inject human-friendly descriptions for Operations, Parameters and Schemas based on XML Comment files
            </summary>
            <param name="swaggerGenOptions"></param>
            <param name="filePath">An abolsute path to the file that contains XML Comments</param>
            <param name="includeControllerXmlComments">
            Flag to indicate if controller XML comments (i.e. summary) should be used to assign Tag descriptions.
            Don't set this flag if you're customizing the default tag for operations via TagActionsBy.
            </param>
        </member>
    </members>
</doc>
